--- a/static/js/app_logic.js
+++ b/static/js/app_logic.js
@@ -118,39 +118,42 @@
 window.handleBackendMessage = (message) => {
     console.log('AppLogic - Backend message received:', message);
     if (window.addMessageToHistory) { // Assicurati che la funzione esista
-        window.addMessageToHistory(`Backend: ${message.type} (ID: ${message.request_id || 'N/A'})`);
+        addMessageToHistory(`Backend: ${message.type} (ID: ${message.request_id || 'N/A'})`);
     }
 
-    // Delegate to specific module handlers based on message type or content
-    if (message.type.startsWith('get_filesystems') ||
-        (message.type.startsWith('list_directory_response') && window.isTreeviewRequest && window.isTreeviewRequest(message.request_id))) { // Heuristic for treeview
+    // Inoltra 'list_directory_response' a entrambi i controller.
+    // Ogni controller verificherà se il request_id è di sua competenza.
+    if (message.type === 'list_directory_response') {
         if (window.handleTreeviewBackendResponse) { // from treeview_controller.js
             window.handleTreeviewBackendResponse(message);
         }
-    } else if (message.type.startsWith('list_directory_response') ||
+        if (window.handleFilelistBackendResponse) { // from filelist_controller.js
+            window.handleFilelistBackendResponse(message);
+        }
+    } else if (message.type === 'get_filesystems_response') { // Specifico per treeview
+        if (window.handleTreeviewBackendResponse) { // from treeview_controller.js
+            window.handleTreeviewBackendResponse(message);
+        }
+    } else if (message.type === 'create_directory_response' ||
                message.type === 'delete_item_response' ||
                message.type === 'check_directory_contents_response') {
         if (window.handleFilelistBackendResponse) { // from filelist_controller.js
             window.handleFilelistBackendResponse(message);
         }
     } else if (message.type === 'pong') {
-        if (window.handlePongMessage) { // From websocket_service.js
+        if (window.handlePongMessage) {
             window.handlePongMessage(message);
         }
     } else if (message.type === 'config_update') {
-        if (window.handleConfigUpdate) { // From websocket_service.js
+        if (window.handleConfigUpdate) {
              window.handleConfigUpdate(message);
         }
     } else if (message.type === 'error') {
-        console.error('AppLogic - Backend error:', message.payload.error);
-        if (window.showToast) { // From notification_service.js
-            window.showToast(`Errore dal backend: ${message.payload.error}`, 'error');
-        }
-        // Potentially hide spinners if an operation failed
-        // Consider moving spinner logic into specific handlers or a more robust error handling
-        if(window.hideFilelistLoadingSpinner) window.hideFilelistLoadingSpinner();
-
-        // Allow controllers to handle specific errors if needed
+        console.error('AppLogic - Backend error:', message.payload ? message.payload.error : 'Errore sconosciuto');
+        if (window.showToast) {
+            window.showToast(`Errore dal Backend: ${message.payload ? message.payload.error : 'Errore sconosciuto'}`, 'error');
+        }
+        // Permetti ai controller di gestire errori specifici
         if (window.handleTreeviewBackendResponse) {
             window.handleTreeviewBackendResponse(message); // Passa l'intero messaggio
         }
@@ -160,6 +163,19 @@
     } else {
         console.warn(`AppLogic - Unhandled backend message type: ${message.type}`);
     }
+
+    // La logica per nascondere gli spinner dovrebbe essere gestita all'interno
+    // dei rispettivi controller quando elaborano una risposta pertinente
+    // o un errore specifico per una loro richiesta.
+    // Ad esempio, se arriva un errore generico non legato a una richiesta specifica,
+    // potresti voler nascondere lo spinner del filelist se era attivo.
+    if (message.type === 'error') {
+        // Heuristic: if an error doesn't seem tied to a specific pending request, hide generic spinners
+        const isTreeviewReq = message.request_id && document.querySelector(`li[data-request-id="${message.request_id}"]`);
+        const isFilelistReq = message.request_id && window.lastFilelistRequestId === message.request_id;
+        if (!isTreeviewReq && !isFilelistReq) { // Se l'errore non sembra legato a una richiesta specifica tracciata
+            if(window.hideFilelistLoadingSpinner) window.hideFilelistLoadingSpinner();
+        }
+    }
 };
 
 // --- Global functions for inter-module communication (if any were previously on window.parent) ---

